const id = "Guides/authoring-content-in-mdx.mdx";
						const collection = "docs";
						const slug = "guides/authoring-content-in-mdx";
						const body = "\nCelestialDocs supports [MDX](https://mdxjs.com/) files, which extend Markdown by allowing the inclusion of React components within your content. This enables dynamic and interactive documentation. We specifically use [GitHub flavored markdown (GFM)](https://mdxjs.com/guides/gfm/). Markdown features, refer to the [Markdown documentation](/guides/authoring-content-in-md).\n\n## Using a component\n\nYou can use a component by importing it into your MDX file and then rendering it as a JSX tag. These look like HTML tags but start with an uppercase letter matching the name in your import statement:\n\n```mdx\n---\ntitle: Welcome to my docs\n---\n\nimport Callout from \"@/components/Callout.astro\";\n\n<Callout variant=\"info\">\nSample callout\n</Callout>\n```\n\nSee the [components](/guides/components) for all custom components and their available fields. \n\n## Using GFM (GitHub-Flavored Markdown)\n\nMDX in CelestialDocs supports [GitHub flavored markdown (GFM)](https://mdxjs.com/guides/gfm/), which includes additional features such as tables, task lists, and strikethrough text.\n\n### Task Lists\n\nYou can create task lists using GFM syntax.\n\n- [x] Task 1\n- [ ] Task 2\n- [ ] Task 3\n\n```md\n- [x] Task 1\n- [ ] Task 2\n- [ ] Task 3\n```\n\n### Tables\n\nYou can also create tables using GFM.\n\n| Syntax    | Description |\n| --------- | ----------- |\n| Header    | Title       |\n| Paragraph | Text        |\n\n```md\n| Syntax    | Description |\n| --------- | ----------- |\n| Header    | Title       |\n| Paragraph | Text        |\n```\n### Strikethrough\n\nStrikethrough text can be created using double tilde `~~`.\n\nThis is ~~strikethrough~~ text.\n\n```md\nThis is ~~strikethrough~~ text.\n```\n\n## Frontmatter\n\nMDX files support frontmatter in the same way as Markdown files. You can define metadata at the top of the file.\n\n```mdx\n---\ntitle: Sample MDX Page\n---\n\nPage content goes here, after `---`.\n```\n\nRefer to the frontmatter reference for all available fields and how to add custom fields.\n\n## Using JavaScript Expressions\n\nMDX allows you to use JavaScript expressions within your content. This can be useful for dynamic content and calculations.\n\nCurrent year: {new Date().getFullYear()}\n\n```mdx\nCurrent year: {new Date().getFullYear()}\n```\n\n\n```mdx\n**Fibonacci Sequence**\n\nThe first 10 numbers in the Fibonacci sequence are:\n\n{\n  Array.from({ length: 10 }).map((_, i) => (\n    <span key={i}>{fibonacci(i)} </span>\n  ))\n}\n```\n\n## Syntax Highlighting\n\nMDX supports syntax highlighting for code blocks using backticks. You can specify the language for proper highlighting.\n\n````mdx\n```jsx\nconst MyComponent = () => {\n  return <div>Hello, MDX!</div>;\n};\n```\n````\n\nMDX combines the best of Markdown and JSX, making it a powerful tool for creating rich, interactive documentation. For more details on Markdown syntax, please see the [Markdown documentation](/guides/authoring-content-in-md).";
						const data = {title:"Authoring Content in MDX",author:"saumilthecode",draft:false,tags:[],hide_breadcrumbs:false,hide_toc:false,hide_sidenav:false,max_width:false};
						const _internal = {
							type: 'content',
							filePath: "/Users/tkrobot/Library/Mobile Documents/com~apple~CloudDocs/Documents/BBSSHack-Revamped/src/content/docs/Guides/authoring-content-in-mdx.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
